import 'bootstrap/dist/css/bootstrap.min.css'
import { useEffect, useState } from 'react'
import { Table } from 'react-bootstrap'
import './App.css'
import { useEnterprise } from './hooks/useEnterprise'
import { generateRandomName, generateRandomNumber } from './utils/generate'

type UserStatus = {
	message: string
}

interface UserDataFormat {
	enterpriseId: string
	name: string
	taxid: string
	address: string
	permissions: string
	userHash: string
}

type UserData = {
	data: UserDataFormat[]
	success: boolean
}

const App = () => {
	const randomStreetNumber = generateRandomNumber(2)
	const [userStatus, setUserStatus] = useState<UserStatus | null>(null)
	const [allUsers, setAllUsers] = useState<UserData | null>(null)
	const { getAllUsers } = useEnterprise()
	const baseURL = 'http://localhost:4000'

	console.log(allUsers)

	useEffect(() => {
		if (userStatus) {
			alert(userStatus.message)
		}
		getAllUsers().then(usersData => {
			setAllUsers(usersData.data)
		})
	}, [userStatus])

	const generateRandomUser = async () => {
		const user = {
			// permission and userHashes also can be generated by func
			userHashes: ['0xHash1', 'OxHash2'],
			taxId: generateRandomNumber(12),
			permissions: ['perm1', 'perm2'],
			name: generateRandomName(),
			address: `${randomStreetNumber} Street`,
		}
		try {
			const result = await fetch(`${baseURL}/enterprise/users/add`, {
				method: 'POST',
				headers: {
					Accept: 'application/json',
					'Content-Type': 'application/json',
				},
				body: JSON.stringify(user),
			})
			if (result.ok) {
				const userData = await result.json()
				setUserStatus(userData)
			}
		} catch (error) {
			console.log('Error: ', error)
		}
	}
	return (
		<div className='main'>
			<button onClick={generateRandomUser}>Generate random user</button>
			{allUsers?.data && (
				<Table striped bordered hover>
					<thead>
						<tr>
							<th>Name</th>
							<th>Tax ID</th>
							<th>Address</th>
							<th>Permissions</th>
						</tr>
					</thead>
					<tbody>
						{allUsers?.data.map((el, index) => (
							<tr key={index}>
								<td>{el.name || 'no data'}</td>
								<td>{el.taxid}</td>
								<td>{el.address || 'no data'}</td>
								<td>{el.permissions || 'no data'}</td>
							</tr>
						))}
					</tbody>
				</Table>
			)}
		</div>
	)
}

export default App
